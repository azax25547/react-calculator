{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/Clear.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Input","input","Clear","handleClear","App","state","addToInput","_this","setState","handleEqual","math","error","alert","_this2","this","Input_Input","Button_Button","Clear_Clear","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57103bfa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst isOperator = val => {\r\n  return !isNaN(val) || val === \".\" || val === \"=\";\r\n};\r\nexport const Button = props => (\r\n  <div\r\n    className={`button-wrapper ${\r\n      isOperator(props.children) ? null : \"operator\"\r\n    }`}\r\n    onClick ={() => props.handleClick(props.children)}\r\n  >\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\n","import React from 'react'\r\nimport './input.css'\r\n\r\nexport const Input = (props) => {\r\n    return (\r\n        <div className=\"input\">\r\n            {props.input}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './clear.css'\r\n\r\nexport const Clear = (props) => {\r\n    return (\r\n        <div className=\"clear\" onClick={props.handleClear}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { Input } from './components/Input';\nimport { Clear } from './components/Clear';\nimport * as math from 'mathjs';\n\nclass App extends Component {\n  state = {\n    input : ''\n  }\n\n  addToInput = (val) => {\n    this.setState({\n      input : this.state.input + val\n    })\n  }\n\n  handleEqual = () => {\n    try{\n      this.setState({\n        input : math.eval(this.state.input)\n      })\n    }catch(error) {\n      alert(error)\n    }\n    \n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='calc-wrapper'>\n        <Input input={this.state.input} ></Input>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n          </div> <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.addToInput}>*</Button>\n          </div> <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n          </div> <div className=\"row\">\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div>\n          <Clear handleClear={() => {this.setState({\n            input : \"\"\n          })}} >Clear</Clear>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}